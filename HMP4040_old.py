#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        HMP4040.py
#
#  Project :     HMP4040
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["HMP4040", "HMP4040Class", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(HMP4040.additionnal_import) ENABLED START -----#
import socket
import time
from threading import RLock
import threading

import Tkinter as tk
import tkMessageBox

WAIT_TIME_UNIT=0.01
#----- PROTECTED REGION END -----#	//	HMP4040.additionnal_import

# Device States Description
# No states for this device


class HMP4040 (PyTango.Device_4Impl):
    """HMP4040"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(HMP4040.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	HMP4040.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        HMP4040.init_device(self)
        #----- PROTECTED REGION ID(HMP4040.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HMP4040.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(HMP4040.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HMP4040.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_CH1_V_read_read = 0.0
        self.attr_CH1_C_read_read = 0.0
        self.attr_CH2_V_read_read = 0.0
        self.attr_CH2_C_read_read = 0.0
        self.attr_CH3_V_read_read = 0.0
        self.attr_CH3_C_read_read = 0.0
        self.attr_CH4_V_read_read = 0.0
        self.attr_CH4_C_read_read = 0.0
        self.attr_output_on_off_read_read = False
        self.attr_output_CH1_read_read = False
        self.attr_output_CH2_read_read = False
        self.attr_output_CH3_read_read = False
        self.attr_output_CH4_read_read = False
        #----- PROTECTED REGION ID(HMP4040.init_device) ENABLED START -----#
        self.commlock = RLock()  
        self.connect()
        
        self.check_ch1=False
        self.check_ch2=False
        self.check_ch3=False
        self.check_ch4=False
        
        self.check_connection_warning=False
        
        if not 'AskQuestion' in dir(self):
            self.AskQuestion = threading.Thread(target=self.AskQuestion_thread)
            self.AskQuestion.setDaemon(True)
            self.AskQuestion.start()
        #if not 'pool_values' in dir(self):
        #    self.pool_values = threading.Thread(target=self.pool_values_thread)
        #    self.pool_values.setDaemon(True)
        #    self.pool_values.start() 
        #----- PROTECTED REGION END -----#	//	HMP4040.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(HMP4040.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HMP4040.always_executed_hook

    # -------------------------------------------------------------------------
    #    HMP4040 read/write attribute methods
    # -------------------------------------------------------------------------
    
    def write_CH1_V(self, attr):
        self.debug_stream("In write_CH1_V()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH1_V_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("VOLT {}".format(data),1, False)
        #----- PROTECTED REGION END -----#	//	HMP4040.CH1_V_write
        
    def write_CH1_C(self, attr):
        self.debug_stream("In write_CH1_C()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH1_C_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("CURR {}".format(data),1, False)        
            self.check_ch1=True
        #----- PROTECTED REGION END -----#	//	HMP4040.CH1_C_write
        
    def write_CH2_V(self, attr):
        self.debug_stream("In write_CH2_V()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH2_V_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("VOLT {}".format(data), 2, False)
            self.check_ch2=True
        #----- PROTECTED REGION END -----#	//	HMP4040.CH2_V_write
        
    def write_CH2_C(self, attr):
        self.debug_stream("In write_CH2_C()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH2_C_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("CURR {}".format(data), 2, False)
            self.check_ch2=True
        #----- PROTECTED REGION END -----#	//	HMP4040.CH2_C_write
        
    def write_CH3_V(self, attr):
        self.debug_stream("In write_CH3_V()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH3_V_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("VOLT {}".format(data), 3, False)
            self.check_ch3=True
        #----- PROTECTED REGION END -----#	//	HMP4040.CH3_V_write
        
    def write_CH3_C(self, attr):
        self.debug_stream("In write_CH3_C()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH3_C_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("CURR {}".format(data), 3, False)
            self.check_ch3=True
        #----- PROTECTED REGION END -----#	//	HMP4040.CH3_C_write
        
    def write_CH4_V(self, attr):
        self.debug_stream("In write_CH4_V()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH4_V_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("VOLT {}".format(data), 4, False)
            self.check_ch4=True
        #----- PROTECTED REGION END -----#	//	HMP4040.CH4_V_write
        
    def write_CH4_C(self, attr):
        self.debug_stream("In write_CH4_C()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.CH4_C_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("CURR {}".format(data), 4, False)
            self.check_ch4=True
        #----- PROTECTED REGION END -----#	//	HMP4040.CH4_C_write
        
    def write_output_on_off(self, attr):
        self.debug_stream("In write_output_on_off()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.output_on_off_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_on_off_write
        
    def write_output_CH1(self, attr):
        self.debug_stream("In write_output_CH1()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.output_CH1_write) ENABLED START -----#
        if data==True and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP ON", 1, False)
        elif data==False and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP OFF", 1, False)
        self.attr_output_CH1_read_read=data        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH1_write
        
    def write_output_CH2(self, attr):
        self.debug_stream("In write_output_CH2()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.output_CH2_write) ENABLED START -----#
        if data==True and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP ON", 2, False)
        elif data==False and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP OFF", 2, False)
        self.attr_output_CH2_read_read=data        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH2_write
        
    def write_output_CH3(self, attr):
        self.debug_stream("In write_output_CH3()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.output_CH3_write) ENABLED START -----#
        if data==True and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP ON", 3, False)
        elif data==False and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP OFF", 3, False)
        self.attr_output_CH3_read_read=data        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH3_write
        
    def write_output_CH4(self, attr):
        self.debug_stream("In write_output_CH4()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(HMP4040.output_CH4_write) ENABLED START -----#
        if data==True and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP ON", 4, False)
        elif data==False and self.get_state() == PyTango.DevState.ON:
            self._send_and_recieve("OUTP OFF", 4, False)
        self.attr_output_CH4_read_read=data        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH4_write
        
    def read_CH1_V_read(self, attr):
        self.debug_stream("In read_CH1_V_read()")
        #----- PROTECTED REGION ID(HMP4040.CH1_V_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                v=self._send_and_recieve("VOLT?", 1, True).strip("\n")
                if len(v)>0:
                    self.attr_CH1_V_read_read=round(float(v),3)
        except:
            pass
        attr.set_value(self.attr_CH1_V_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH1_V_read_read
        
    def read_CH1_C_read(self, attr):
        self.debug_stream("In read_CH1_C_read()")
        #----- PROTECTED REGION ID(HMP4040.CH1_C_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                c=self._send_and_recieve("CURR?", 1, True).strip("\n")
                if len(c)>0:
                    self.attr_CH1_C_read_read=round(float(c),3)
        except:
            pass
        attr.set_value(self.attr_CH1_C_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH1_C_read_read
        
    def read_CH2_V_read(self, attr):
        self.debug_stream("In read_CH2_V_read()")
        #----- PROTECTED REGION ID(HMP4040.CH2_V_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                v=self._send_and_recieve("VOLT?", 2, True).strip("\n")
                if len(v)>0:
                    self.attr_CH2_V_read_read=round(float(v),3)
        except:
            pass
        attr.set_value(self.attr_CH2_V_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH2_V_read_read
        
    def read_CH2_C_read(self, attr):
        self.debug_stream("In read_CH2_C_read()")
        #----- PROTECTED REGION ID(HMP4040.CH2_C_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                c=self._send_and_recieve("CURR?", 2, True).strip("\n")
                if len(c)>0:
                    self.attr_CH2_C_read_read=round(float(c),3)
        except:
            pass
        attr.set_value(self.attr_CH2_C_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH2_C_read_read
        
    def read_CH3_V_read(self, attr):
        self.debug_stream("In read_CH3_V_read()")
        #----- PROTECTED REGION ID(HMP4040.CH3_V_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                v=self._send_and_recieve("VOLT?", 3, True).strip("\n")
                if len(v)>0:
                    self.attr_CH3_V_read_read=round(float(v),3)
        except:
            pass
        attr.set_value(self.attr_CH3_V_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH3_V_read_read
        
    def read_CH3_C_read(self, attr):
        self.debug_stream("In read_CH3_C_read()")
        #----- PROTECTED REGION ID(HMP4040.CH3_C_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                c=self._send_and_recieve("CURR?", 3, True).strip("\n")
                if len(c)>0:
                    self.attr_CH3_C_read_read=round(float(c),3)
        except:
            pass
        attr.set_value(self.attr_CH3_C_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH3_C_read_read
        
    def read_CH4_V_read(self, attr):
        self.debug_stream("In read_CH4_V_read()")
        #----- PROTECTED REGION ID(HMP4040.CH4_V_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                v=self._send_and_recieve("MEAS:VOLT:4?", 4, True).strip("\n")
                if len(v)>0:
                    self.attr_CH4_V_read_read=round(float(v),3)
        except:
            pass
        attr.set_value(self.attr_CH4_V_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH4_V_read_read
        
    def read_CH4_C_read(self, attr):
        self.debug_stream("In read_CH4_C_read()")
        #----- PROTECTED REGION ID(HMP4040.CH4_C_read_read) ENABLED START -----#
        try:
            if self.get_state() == PyTango.DevState.ON:
                c=self._send_and_recieve("MEAS:CURR:4?", 4, True).strip("\n")
                if len(c)>0:
                    self.attr_CH4_C_read_read=round(float(c),4)
        except:
            pass
        attr.set_value(self.attr_CH4_C_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.CH4_C_read_read
        
    def read_output_on_off_read(self, attr):
        self.debug_stream("In read_output_on_off_read()")
        #----- PROTECTED REGION ID(HMP4040.output_on_off_read_read) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            resp=self._send_and_recieve("OUTP:GEN?", 0, True).strip("\n")
            if resp!="":
                if resp=="1":
                    self.attr_output_on_off_read_read=True
                elif resp=="0":
                    self.attr_output_on_off_read_read=False        
        attr.set_value(self.attr_output_on_off_read_read)

        #----- PROTECTED REGION END -----#	//	HMP4040.output_on_off_read_read
        
    def read_output_CH1_read(self, attr):
        self.debug_stream("In read_output_CH1_read()")
        #----- PROTECTED REGION ID(HMP4040.output_CH1_read_read) ENABLED START -----#
        attr.set_value(self.attr_output_CH1_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH1_read_read
        
    def read_output_CH2_read(self, attr):
        self.debug_stream("In read_output_CH2_read()")
        #----- PROTECTED REGION ID(HMP4040.output_CH2_read_read) ENABLED START -----#
        attr.set_value(self.attr_output_CH2_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH2_read_read
        
    def read_output_CH3_read(self, attr):
        self.debug_stream("In read_output_CH3_read()")
        #----- PROTECTED REGION ID(HMP4040.output_CH3_read_read) ENABLED START -----#
        attr.set_value(self.attr_output_CH3_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH3_read_read
        
    def read_output_CH4_read(self, attr):
        self.debug_stream("In read_output_CH4_read()")
        #----- PROTECTED REGION ID(HMP4040.output_CH4_read_read) ENABLED START -----#
        attr.set_value(self.attr_output_CH4_read_read)
        
        #----- PROTECTED REGION END -----#	//	HMP4040.output_CH4_read_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(HMP4040.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HMP4040.read_attr_hardware


    # -------------------------------------------------------------------------
    #    HMP4040 command methods
    # -------------------------------------------------------------------------
    
    def connect(self):
        """ 
        """
        self.debug_stream("In connect()")
        #----- PROTECTED REGION ID(HMP4040.connect) ENABLED START -----#
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connected = False
        self.last_comm_timeout = False
        print ("Connecting to Host", self.host, ", Port", self.port)
        try:
            self.sock.setblocking(1)
        except:
            pass
        try:
            self.sock.connect((self.host, self.port))
        except Exception as e:
            print ("Exception occured while connecting")
            print (e.__class__)
            print (e)
            self.connected = False
        else:
            print ("Success.")
            self.connected = True
        self.sock.setblocking(0)
        if self.connected==True:
            resp=self._send_and_recieve("*IDN?",0, True)
            if resp.split(",")[0]=="ROHDE&SCHWARZ":
                self.set_state(PyTango.DevState.ON)
            else:
                self.set_state(PyTango.DevState.FAULT)
                self.check_connection_warning=True
        else:
            self.set_state(PyTango.DevState.FAULT)
            self.check_connection_warning=True        
        #----- PROTECTED REGION END -----#	//	HMP4040.connect
        
    def disconnect(self):
        """ 
        """
        self.debug_stream("In disconnect()")
        #----- PROTECTED REGION ID(HMP4040.disconnect) ENABLED START -----#
        self.sock.close()
        self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	HMP4040.disconnect
        

    #----- PROTECTED REGION ID(HMP4040.programmer_methods) ENABLED START -----#

        
    def _send_and_recieve(self, command, channel, recieve, timeout=2.0):
        #print "command", command
        with self.commlock:
            #print ("communicate called")
            if channel!=0:
                self.sock.send("INST:NSEL {}".format(str(channel))+'\n')
                time.sleep(0.05)
                self.sock.send(command+'\n')
            else:
                self.sock.send(command+'\n')
            if recieve==True:
                time.sleep(0.100)
                resp = ""
                resp += self.sock.recv(10000)
                tstart = time.time()
                tend = tstart
                # really wait (block!) until end-of-line character is reached
                while( (len(resp)==0 or resp[-1]!='\n') and tend-tstart<timeout):
                    #print "Delay!"
                    resp += self.sock.recv(10000)                     
                    time.sleep(WAIT_TIME_UNIT)
                    tend = time.time()
                    #self.last_comm_timeout = (tend-tstart>=timeout)            
                return resp
        
            

    def AskQuestion_thread(self):
        while True:
            if self.check_connection_warning==True:
                self.check_connection_warning=False
                root = tk.Tk()
                root.withdraw()
                MsgBox = tkMessageBox.showinfo ('Warning!','can not connect to device',icon = 'warning')
                root.destroy()
        
    #----- PROTECTED REGION END -----#	//	HMP4040.programmer_methods

class HMP4040Class(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(HMP4040.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	HMP4040.global_class_variables


    #    Class Properties
    class_property_list = {
        'host':
            [PyTango.DevString, 
             '',
            ["192.168.3.215"] ],
        'port':
            [PyTango.DevLong, 
             '',
            [5025]],
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'connect':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'disconnect':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'CH1_V':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CH1_C':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CH2_V':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CH2_C':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CH3_V':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CH3_C':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CH4_V':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CH4_C':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'output_on_off':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'output_CH1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'output_CH2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'output_CH3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'output_CH4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'CH1_V_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'CH1_C_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'CH2_V_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'CH2_C_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'CH3_V_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'CH3_C_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'CH4_V_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'CH4_C_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'output_on_off_read':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'output_CH1_read':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'output_CH2_read':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'output_CH3_read':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'output_CH4_read':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(HMP4040Class, HMP4040, 'HMP4040')
        #----- PROTECTED REGION ID(HMP4040.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HMP4040.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
